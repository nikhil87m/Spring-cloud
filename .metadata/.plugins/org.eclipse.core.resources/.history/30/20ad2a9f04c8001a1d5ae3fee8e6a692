package com.example.demo;

import java.math.BigDecimal;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.service.CurrencyConversionService;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@RestController
@RefreshScope
@RequestMapping("/CurrencyConversionService")
public class CurrencyConversionController {
	
	private static Logger logger= LoggerFactory.getLogger(CurrencyConversionController.class);
	
	@Autowired
	private CurrencyConversionService currencyConversionService;
	
	
	@GetMapping("/convertCurrency")
	@HystrixCommand(fallbackMethod="convertCurrencyFallback")
	public ResponseEntity<String> convertCurrency(@RequestParam String currencyFrom, @RequestParam String currencyTo, @RequestParam BigDecimal amount){
		logger.debug("Entry : convertCurrency: currencyFrom:"+currencyFrom+"currencyTo :"+currencyTo+"amount"+amount);
		BigDecimal caa = currencyConversionService.convertCurrency(currencyFrom, currencyTo, amount);
		logger.debug("Exit : convertCurrency: calculated amount "+caa);
		return ResponseEntity.status(HttpStatus.OK).body("Converted amount is " + caa);
	}
	
	public ResponseEntity<String> convertCurrencyFallback(String currencyFrom,  String currencyTo, BigDecimal amount){
		logger.debug("INSIDE: convertCurrency");
		return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Inside Fallback method");
	}

}
