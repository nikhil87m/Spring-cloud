package com.example.demo;

import java.math.BigDecimal;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.entity.ExchangeEntity;
import com.example.repo.ExchangeRepository;
import com.example.service.CurrencyExchangeService;

@RestController
@RequestMapping("/CurrencyExchangeController")
public class CurrencyExchangeController {
	private static Logger logger= LoggerFactory.getLogger(CurrencyExchangeController.class);
	
	@Autowired
	private ExchangeRepository exchangeRepository;
	
	@Autowired
	private CurrencyExchangeService currencyExchangeService;
	
	@GetMapping("/getExchangeValue")
	public BigDecimal getExchangeValue(@RequestParam(name="currencyFrom", required = false) String currencyFrom, @RequestParam(name="currencyTo", required = false) String currencyTo){
		logger.debug("Entry : getExchangeValue");
		
		ExchangeEntity exchangeEntity = exchangeRepository.findByCurrencyFromAndCurrencyTo(currencyFrom, currencyTo);
		logger.debug("Exit : getExchangeValue");
		return exchangeEntity.getConversionFactor();
	}
	
	@GetMapping("/updateCurrencyFactor")
	public void updateCurrencyFactor(@RequestParam(name="currencyFrom", required = false) String currencyFrom, @RequestParam(name="currencyTo", required = false) String currencyTo, @RequestParam(name="conversionFactor", required = false) BigDecimal conversionFactor ){
		logger.debug("Entry : updateCurrencyFactor");
		logger.debug("Exit : updateCurrencyFactor");
	}
	
	@GetMapping("/addCurrencyFactor")
	public void addCurrencyFactor(@RequestParam(name="currencyFrom", required = false) String currencyFrom, @RequestParam(name="currencyTo", required = false) String currencyTo, @RequestParam(name="conversionFactor", required = false) BigDecimal conversionFactor){
		logger.debug("Entry : addCurrencyFactor");
		logger.debug("Exit : addCurrencyFactor");
	}

}
